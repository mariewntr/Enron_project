#we pass through a locate to return in a list the index of the row where we find them
counting_text <- as.list(str_locate(df$reference, word))
#we count the index for which we don't have NA
nb <- sum(!is.na(counting_text))
#store the frequency for each words in the email text
email_words_freq <- c(email_words_freq, nb)
}
#for each status we make a total with the count from the subject and the text
total_count <- subject_freq + email_words_freq
#draw the wordcloud with the frequency of each word, only the top 10
wordcloud(word_list, total_count, min.freq = 10 ,max.words= 10,scale = c(3, 0.5), col=colorRampPalette(c("#cce5ff", "#3399ff", "#003366"))(length(word_list)), rot.per = 0.3)
title(main = paste0("Top 10 words in the email received by ",status), col.main = "black", font.main = 2)
}
#Display the top 10 email address of sender
p1 <- df_message_status %>%
#keep distinct exchange
distinct(sender, subject, recipient, .keep_all = TRUE) %>%
group_by(sender)%>% count() %>% #to count the number of email send per email address
ungroup() %>%
#calculate the percentage for each sender
mutate(perc = round(`n`/sum(`n`),3),
labels = scales::percent(perc)) %>%
arrange(desc(n)) %>% head(10) %>% #to get only the 10 email address with the most important number of email send
#bar chart
ggplot(aes(reorder(sender, perc, sum), perc, fill = sender)) +
geom_bar(stat="identity") +
coord_flip() +
#graph title and label
geom_text(aes(label = labels), vjust = 0.5, size = 4) + #display the percentage for each category at the end of the corresponding bar
scale_y_continuous(labels = scales::percent_format())+
labs(title = "Top 10 Enron's employee email sender")+
xlab("Employee's email address")+
ylab("Email sent per sender (%)") +
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "none",
plot.margin = margin(10, 10, 10, 20))
#Display the top 10 email address of recipient
p2 <- df_message_status %>% filter(rtype == "TO") %>% #select only the email of the direct concerned receiver
distinct(sender, recipient, subject, .keep_all = TRUE) %>%
group_by(recipient)%>% count() %>% #to count the number of email send per email address
ungroup() %>%
#calculate the percentage for each sender
mutate(perc = round(`n`/sum(`n`),4),
labels = scales::percent(perc)) %>%
arrange(desc(n)) %>% head(10) %>% #to get only the 10 email address with the most important number of email send
#bar chart
ggplot(aes(reorder(recipient, perc, sum), perc, fill = recipient)) +
geom_bar(stat="identity") +
coord_flip() +
#graph title and label
geom_text(aes(label = labels), vjust = 0.5, size = 4) + #display the percentage for each category at the end of the corresponding bar
scale_y_continuous(labels = scales::percent_format())+
labs(title = "Top 10 Enron's employee email receiver",
subtitle = "Only principal receiver")+
xlab("Employee's email address")+
ylab("Email received per recipient (%)") +
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "none",
plot.margin = margin(10, 10, 10, 20))
#arrange the plot on the same place
p1 / p2
#return only one result from that query to get the status of the most active sender/recipient
head(df_message_status[df_message_status$sender == "jeff.dasovich@enron.com", "status_sender"],
n=1)
#count the number of email send by jeff dasovich per day
jeff_stat_send <- df_message_status %>% filter(sender == "jeff.dasovich@enron.com") %>%
#we count the number of different email subject send per day
group_by(date, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
#count the number of email send by all sender per day
sender_stat <- df_message_status %>%
#we count the number of different email subject send per day by each sender
group_by(date, sender, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "All sender") %>% select(-sender) %>% transform(source = as.factor(source))
#count the number of email send by Employee status per day
statuts_stat_send <- df_message_status %>% filter(status_sender == "Employee") %>%
#we count the number of different email subject send per day by each sender of status employee
group_by(date, sender, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Employee status") %>% transform(source = as.factor(source))
#combine the rows together to create a unique dataframe and compared the enron's worker and the employee to Jeff
violin_plot1 <- bind_rows(jeff_stat_send, statuts_stat_send)
violin_plot2 <- bind_rows(jeff_stat_send, sender_stat)
#compared the 2 groups per a t.test to see if jeff dasovitch is really most active than the other employee
p3 <- ggplot(violin_plot1, aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
#display the comparative statistic on the violin plot
stat_compare_means(method = "t.test", label.y = max(violin_plot1$email_count) - 400)+
labs(title = "Comparison of the email sent between
Jeff Dasovitch and the Enron's Employee",
x = "Source",
y = "Number of emails") +
#to better see the violin plot we break the y axis
scale_y_break(c(100, 3000), scales = 0.3)+
#set up the color for each resources
scale_fill_manual(values = c(
"Jeff Dasovich" = "tomato2",
"Employee status" = "yellowgreen"))+
#withdraw the legend form the plot
theme(legend.position = "none")
#same plot but to compared Jeff Dasovitch to the Enron's worker
p4 <- ggplot(violin_plot2, aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
stat_compare_means(method = "t.test", label.y = max(violin_plot2$email_count) - 2000)+
scale_y_break(c(250, 15000), scales = 0.3)+
labs(title = "Comparison of the email sent between
Jeff Dasovitch and all sender",
x = "Source",
y = "Number of emails") +
scale_fill_manual(#set up the color for each resources
values = c(
"Jeff Dasovich" = "tomato2",
"All sender" = "cyan"))+
theme(legend.position = "none")
#arrange the plot on the same place
p3 + p4
#display the stat of the different group
violin_plot <- bind_rows(jeff_stat_send, sender_stat, statuts_stat_send)
#Description of the email send by Jeff Dasovich, the Employee, and all
violin_plot %>% group_by(source)%>%
summarise(
mean = mean(email_count),
sd = sd(email_count),
min = min(email_count),
Q1 = quantile(email_count, 0.25),
Q3 = quantile(email_count, 0.75),
max = max(email_count)
)
#statistics on the jeff dasovich email receive per day
jeff_stat_rec <- df_message_status %>% filter(recipient == "jeff.dasovich@enron.com") %>%
group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
#statistics on the email send per day by all the recipient
recipient_stat <- df_message_status %>% group_by(date, recipient) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Enron's worker") %>% select(-recipient) %>% transform(source = as.factor(source))
#statistics on the email send per day by the enron's worker who have an employee statuts
statuts_stat_rec <- df_message_status %>% filter(status_recipient == "Employee") %>% group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Employee status") %>% transform(source = as.factor(source))
#combine the rows together to create a unique dataframe and compared the enron's worker and the employee to Jeff
violin_plot1 <- bind_rows(jeff_stat_rec, statuts_stat_rec)
violin_plot2 <- bind_rows(jeff_stat_rec, recipient_stat)
#compared the 2 groups per a t.test to see if jeff dasovitch is really most active than the other employee and/or worker in Enron's company
p3 <- ggplot(violin_plot1, aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
#compared statisticaly the 2 group to see if the difference is significant or not
stat_compare_means(method = "t.test", label.y = max(violin_plot1$email_count) + 2)+
labs(title = "Comparison of the email received between
Jeff Dasovitch and the Enron's Employee",
x = "Source",
y = "Number of emails") +
theme(legend.position = "none")+
scale_fill_manual(#set up the color for each resources
values = c(
"Jeff Dasovich" = "tomato2",
"Employee status" = "yellowgreen"
))
p4 <- ggplot(violin_plot2, aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
ylim(c(-10,350))+
stat_compare_means(method = "t.test", label.y = 300)+
labs(title = "Comparison of the email received between
Jeff Dasovitch and all recipient",
x = "Source",
y = "Number of emails") +
theme(legend.position = "none")+
scale_fill_manual(#set up the color for each resources
values = c(
"Jeff Dasovich" = "tomato2",
"All recipient" = "cyan"
))
#arrange the plot on the same place
p3 + p4
violin_plot <- bind_rows(jeff_stat_rec, recipient_stat, statuts_stat_rec)
#Description of the email received
violin_plot %>% group_by(source) %>%
summarise(
mean = mean(email_count),
median = median(email_count),
sd = sd(email_count),
min = min(email_count),
Q1 = quantile(email_count, 0.25),
Q3 = quantile(email_count, 0.75),
max = max(email_count)
)
#global environment cleaning
rm(grid_plot, i, j, n, no_legend, p, p3, p4, plot_list, plot_on_the_page, plot_per_section, plots_with_legend, status, status_list,
status_email_subject, adjacencyData_99, adjacencyData_00, adjacencyData_01, adjacencyData_02, word, word_count, nb, legend, email_words_freq, counting, search, df, total_count, email_words_freq, subject_freq)
#to find the person involved in the fiscal fraud we use str_detect to see if we can find them in the data set
#for example here for Vincent Kaminski
people_of_interest <- df_message_status%>% filter(str_detect(sender,"kaminski"))
#email send:
person_of_interest_send <- email_subject_send %>%
filter(str_detect(sender,"jeff.dasovich|andrew.baker|tim.belden|andrew.fastow|lfastow|vkaminski|jordan.mintz|jeff.skilling|sherron.watkins|richard.causey|greg.whalley")) %>%
mutate(
#identify the person who sent the email
email_label_sender = case_when(
sender == "jeff.dasovich@enron.com" ~ "Jeff Dasovich",
sender == "kenneth.lay@enron.com" ~ "Kenneth Lay",
sender == "jeff.skilling@enron.com" ~ "Jeffrey Skilling",
sender == "andrew.baker@enron.com" ~ "Andrew Baker",
sender == "tim.belden@enron.com" ~ "Timothy Belden",
sender %in% c("lfastow@pop.pdq.net", "lfastow@pdq.net") ~ "Lea Fastow",
sender == "andrew.fastow@enron.com" ~ "Andrew Fastow",
sender %in% c("vkaminski@enron.com", "vkaminski@aol.com", "vkaminski@palm.net") ~ "Vincent Kaminski",
sender == "jordan.mintz@enron.com" ~ "Jordan Mintz",
sender == "sherron.watkins@enron.com" ~ "Sherron Watkins",
sender == "richard.causey@enron.com" ~ "Richard Causey", #chief account officer wikipedia source
sender == "greg.whalley@enron.com" ~ "Greg Whalley", #president and COO of Enron wholesale service
.default = sender))
#email received
person_of_interest_reciveid <- email_subject_rec %>%
filter(str_detect(recipient,"jeff.dasovich|andrew.baker|tim.belden|andrew.fastow|lfastow|vkaminski|jordan.mintz|jeff.skilling|sherron.watkins|richard.causey|greg.whalley")) %>%
mutate(
#identify the person who sent the email
email_label_recipient =
case_when(
recipient %in% c("jeff.dasovich@enron.com","jeff_dasovich@ees.enron.com") ~ "Jeff Dasovich",
recipient == "kenneth.lay@enron.com" ~ "Kenneth Lay",
recipient %in% c("jeff.skilling@enron.com","jeff_skilling@enron.com") ~ "Jeffrey Skilling",
recipient == "andrew.baker@enron.com" ~ "Andrew Baker",
recipient %in% c("tim.belden@enron.com", "tim_belden@pgn.com") ~ "Timothy Belden",
recipient %in% c("lfastow@pop.pdq.net", "lfastow@pdq.net") ~ "Lea Fastow",
recipient %in% c("andrew.fastow@enron.com", "andrew.fastow@ljminvestments.com") ~ "Andrew Fastow",
recipient %in% c("vkaminski@enron.com", "vkaminski@aol.com","vkaminski@aol .com", "vkaminski@palm.net",
"vkaminski@ol.com", "vkaminski@aol .com", "vkaminski@aol .com") ~ "Vincent Kaminski",
recipient %in% c("jordan.mintz@enron.com","jordan_mintz@enron.com") ~ "Jordan Mintz",
recipient == "sherron.watkins@enron.com" ~ "Sherron Watkins",
recipient == "richard.causey@enron.com" ~ "Richard Causey", #chief account officer wikipedia source
recipient == "greg.whalley@enron.com" ~ "Greg Whalley", #president and COO of Enron wholesale service
.default = recipient))
#create a list with the name of each person we want to study
enron_worker_send <- unique(person_of_interest_send$email_label_sender)
#initiate the list to store the plot
worker_send_plot <- list()
#loop allowing to construct a bar plot to display per month the number of email send by each person study
for(i in seq(enron_worker_send)){
worker <- enron_worker_send[i]
p <- person_of_interest_send %>% filter(email_label_sender == worker) %>%
group_by(year,month) %>%
count() %>%
#bar plot
ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = paste("Email sent per month for each year by", worker),
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
worker_send_plot[[i]] <- p}
worker_send_plot
#liste of person study
enron_worker_rec <- unique(person_of_interest_reciveid$email_label_recipient)
#loop allowing to construct a bar plot to display per month the number of email received by each person study
worker_rec_plot <- list()
for(i in seq(enron_worker_rec)){
worker <- enron_worker_rec[i]
p <- person_of_interest_reciveid %>% filter(email_label_recipient == worker) %>%
group_by(year,month) %>%
count() %>%
#bar plot
ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = paste("Email received per month for each year by", worker),
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
worker_rec_plot[[i]] <- p}
worker_rec_plot
#extract the worker who are interesting to follow and compute the number of email send by them
person_of_interest_send_subject <- person_of_interest_send %>%
#to compute the number of email sent in each topics by the person whose are directly involved in the Enron scandal
group_by(year_month, email_label_sender) %>%
mutate(
sum_subject_meeting = sum(subject_meeting),
sum_subject_business_process = sum(subject_business_process),
sum_subject_core_business = sum(subject_core_business),
sum_subject_enron_event = sum(subject_enron_event),
#for the email we use na.rm = TRUE to allow the sum to be done
sum_email_business_process = sum(email_business_process, na.rm = TRUE),
sum_email_core_business = sum(email_core_business, na.rm = TRUE),
sum_email_meeting = sum(email_meeting, na.rm = TRUE),
sum_email_enron_event = sum(email_enron_event, na.rm = TRUE)) %>% ungroup() %>%
#keep one line per year and month
distinct(year_month, email_label_sender, sum_subject_meeting, sum_subject_business_process, sum_subject_core_business, sum_subject_enron_event,
sum_email_business_process,sum_email_core_business,sum_email_meeting,sum_email_enron_event)
#pivot the table
person_of_interest_send_subject <-person_of_interest_send_subject %>%
pivot_longer(
cols = 3:length(person_of_interest_send_subject),
names_to = "topic_email",
values_to = "value"
)
#initiate the list to collect the plot
plot_list <- list()
#generating individual plot for each status
for(i in seq(enron_worker_send)){
#assign the status to the variable
worker <- enron_worker_send[i]
#the plot related to that status
p <- person_of_interest_send_subject %>% filter(email_label_sender == worker) %>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
labs(color = "Email topics (subject & text)",
title = paste("Email sent by", worker, "subject and text analysis"),
y = "Number of emails per topic",
x = "Study period")+
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
#append the plot list
plot_list[[i]] <- p
}
#display the plot created
n <- length(plot_list)
#number of plot per layout
plot_per_section <- 3
#create plot layouts
for (i in seq(1, n, by=plot_per_section)){
plot_on_the_page <- plot_list[i:min(i+2, n)]
#extract the legend from the first plot on the layout
legend <- get_legend(plot_on_the_page[[1]], nrow = 2)
#remove the legend for all plot on the layout
no_legend <- lapply(plot_on_the_page, function(p) p + theme(legend.position = "none"))
#display 4 plots per layout
grid_plot <- arrangeGrob(grobs = no_legend, ncol = 2)
#combine together the 3 plot and one legend
plots_with_legend <- arrangeGrob(
grid_plot,
legend,
nrow = 2,
#arrange the plot and the legend in the layout
heights = unit.c(unit(1,"npc") - unit(7, "lines"), unit(7,"lines"))
)
#display everything together
grid.newpage()
grid.draw(plots_with_legend)
}
#extract the worker who are interesting to follow and compute the number of email send by them
person_of_interest_reciveid_subject <- person_of_interest_reciveid %>%
#to compute the number of email sent in each topics by the person whose are directly involved in the Enron scandal
group_by(year_month, email_label_recipient) %>%
mutate(
sum_subject_meeting = sum(subject_meeting),
sum_subject_business_process = sum(subject_business_process),
sum_subject_core_business = sum(subject_core_business),
sum_subject_enron_event = sum(subject_enron_event),
#for the email we use na.rm = TRUE to allow the sum to be done
sum_email_business_process = sum(email_business_process, na.rm = TRUE),
sum_email_core_business = sum(email_core_business, na.rm = TRUE),
sum_email_meeting = sum(email_meeting, na.rm = TRUE),
sum_email_enron_event = sum(email_enron_event, na.rm = TRUE)) %>% ungroup() %>%
#keep one line per year and month
distinct(year_month, email_label_recipient, sum_subject_meeting, sum_subject_business_process, sum_subject_core_business, sum_subject_enron_event,
sum_email_business_process,sum_email_core_business,sum_email_meeting,sum_email_enron_event)
#pivot the table
person_of_interest_reciveid_subject <-person_of_interest_reciveid_subject %>%
pivot_longer(
cols = 3:length(person_of_interest_reciveid_subject),
names_to = "topic_email",
values_to = "value"
)
#initiate the list to collect the plot
plot_list <- list()
#generating individual plot for each status
for(i in seq(enron_worker_rec)){
#assign the status to the variable
worker <- enron_worker_rec[i]
#the plot related to that status
p <- person_of_interest_reciveid_subject %>% filter(email_label_recipient == worker)%>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
labs(color = "Email topics (subject & text)",
title = paste("Email received by", worker, "subject and text analysis"),
y = "Number of emails per topic",
x= "Study period")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
#append the plot list
plot_list[[i]] <- p
}
#display the plot created
n <- length(plot_list)
#number of plot per layout
plot_per_section <- 3
#create plot layouts
for (i in seq(1, n, by=plot_per_section)){
plot_on_the_page <- plot_list[i:min(i+2, n)]
#extract the legend from the first plot on the layout
legend <- get_legend(plot_on_the_page[[1]], nrow = 2)
#remove the legend for all plot on the layout
no_legend <- lapply(plot_on_the_page, function(p) p + theme(legend.position = "none"))
#display 4 plots per layout
grid_plot <- arrangeGrob(grobs = no_legend, ncol = 2)
#combine together the 3 plot and one legend
plots_with_legend <- arrangeGrob(
grid_plot,
legend,
nrow = 2,
#arrange the plot and the legend in the layout
heights = unit.c(unit(1,"npc") - unit(7, "lines"), unit(7,"lines"))
)
#display everything together
grid.newpage()
grid.draw(plots_with_legend)
}
#extraction of the email exchange whose not involved the enron worker
extern_email <- df_message_status %>% select(date, year, month, sender, recipient, subject, reference) %>%
#count for each the sender and recipient whose have an enron email address
mutate(count_sender = if_else(str_detect(sender, "@enron"), 1, 0),
count_recipient = if_else(str_detect(recipient, "@enron"), 1,0)) %>%
#for each date and subject for each date make the sum of the sender and recipient with an enron email address
group_by(date, subject) %>% mutate(
sum_sender = sum(count_sender),
sum_recipient = sum(count_recipient)) %>% ungroup() %>%
#isolate the email exchange which not involved person with an enron email address
filter((sum_sender ==0) & (sum_recipient == 0)) %>% select(-c(count_sender, count_recipient, sum_sender, sum_recipient)) %>%
#transform all the string variable into factor data type
transform(sender = as.factor(sender),
recipient = as.factor(recipient))
summary(extern_email)
extern_email_graph <- extern_email %>% distinct(date, year, month, sender, recipient, subject, reference) %>%
#filter for the email having in their subject enron
filter(str_detect(subject, "enron|Enron") | str_detect(reference, "enron|Enron")) %>%
mutate(#count the number of email which contain at least one word in the list of each topic
subject_meeting = if_else(str_detect(subject, topic_meeting), 1, 0),
subject_business_process = if_else(str_detect(subject, topic_business_process), 1, 0),
subject_core_business = if_else(str_detect(subject, topic_core_business), 1, 0),
subject_enron_event = if_else(str_detect(subject, topic_enron_event), 1, 0),
email_meeting = if_else(str_detect(reference,topic_meeting), 1, 0),
email_business_process = if_else(str_detect(reference, topic_business_process), 1, 0),
email_core_business = if_else(str_detect(reference, topic_core_business), 1, 0),
email_enron_event = if_else(str_detect(reference, topic_enron_event), 1, 0),
#to get the date in year/month
year_month = as.Date(paste0(year,"-",month,"-01"))) %>%
group_by(year_month) %>%
mutate(
sum_subject_meeting = sum(subject_meeting),
sum_subject_business_process = sum(subject_business_process),
sum_subject_core_business = sum(subject_core_business),
sum_subject_enron_event = sum(subject_enron_event),
#for the email we use na.rm = TRUE to allow the sum to be done
sum_email_business_process = sum(email_business_process, na.rm = TRUE),
sum_email_core_business = sum(email_core_business, na.rm = TRUE),
sum_email_meeting = sum(email_meeting, na.rm = TRUE),
sum_email_enron_event = sum(email_enron_event, na.rm = TRUE)) %>% ungroup() %>%
#keep one line per year and month
distinct(year_month, subject, sum_subject_meeting, sum_subject_business_process, sum_subject_core_business, sum_subject_enron_event,
sum_email_business_process,sum_email_core_business,sum_email_meeting,sum_email_enron_event)
#graph of the email speaking about enron and which could be speaking about enron event/business process
extern_email_graph %>% select(-subject) %>%
#change the orientation of the data set
pivot_longer(
cols = 2:9,
names_to = "topics",
values_to = "value") %>%
#scatter plot and trend line
ggplot(aes(year_month,value, color=topics))+
geom_line(size = 1)+
#label, axis, and legend
labs(color = "Email topics (subject & text)",
title = "Email subject and text about enron event",
subtitle = "Email exchange about Enron between person whose haven't an enron email address",
x = "Study period",
y = "Number of emails per topic") +
#to display the year and month, every 3 months for a better reading
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
scale_color_manual(#to get only the customization for the email categories
values = topic_colors,
labels = topic_label)
#isolate the subject about enron and their event
Enron_subject <- extern_email_graph %>%
filter(str_detect(subject, "enron|Enron")) %>%
filter((sum_subject_meeting != 0) | (sum_subject_business_process != 0) | (sum_subject_core_business != 0) | (sum_subject_enron_event != 0)) %>% distinct(year_month, subject, .keep_all = TRUE)
#drop the line whose seems to be extern exchange
no_extern <- df_message_status %>% select(date, sender, recipient, subject, reference) %>%
#count for each the sender and recipient whose have an enron email address
mutate(count_sender = if_else(str_detect(sender, "@enron"), 1, 0),
count_recipient = if_else(str_detect(recipient, "@enron"), 1,0)) %>%
#for each date and subject for each date make the sum of the sender and recipient with an enron email address
group_by(date, subject) %>% mutate(
sum_sender = sum(count_sender),
sum_recipient = sum(count_recipient)) %>% ungroup() %>%
#isolate the email exchange which not involved person with an enron email address
filter((sum_sender !=0) | (sum_recipient != 0)) %>% select(-c(count_sender, count_recipient, sum_sender, sum_recipient)) %>%
#transform all the string variable into factor data type
transform(sender = as.factor(sender),
recipient = as.factor(recipient))
#inner joint with the main table to see if we can find those subject in exchange between enron employee
print(verify <- inner_join(no_extern, Enron_subject, by = "subject"))
