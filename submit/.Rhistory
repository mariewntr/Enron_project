filter(
year_month >= input$date_range_status[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_status[2], #for year_month is smaller than the min date in the range
#for selecting the status
status_recipient == input$status_choice_tab1,
#for selecting the topics
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_status])
)%>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
labs(color = "Email topics (subject & text)",
title = paste("Email received by", input$status_choice_tab1, ", subject and text analysis"),
y = "Number of emails")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
})
output$nbEmailSendStatus_tab2 <- renderPlot({
df_message_status %>% filter(status_sender == input$status_choice_tab2) %>%
group_by(year,month)%>%
count() %>%
ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = paste("Email sent per month for each year by the", input$status_choice_tab2),
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
})
output$nbEmailRecStatus_tab2 <- renderPlot({
df_message_status %>% filter(status_recipient == input$status_choice_tab2) %>%
group_by(year,month)%>%
count() %>%
ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = paste("Email received per month for each year by the", input$status_choice_tab2),
y = "Number of emails",
x = "Study period")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
})
output$SubjectEmailSendStatus_tab2 <- renderPlot({
status_email_subject_send %>%
filter(
year_month >= input$date_range_status[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_status[2], #for year_month is smaller than the min date in the range
#for selecting the status
status_sender == input$status_choice_tab2,
#for selecting the topics
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_status])
)%>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
labs(color = "Email topics (subject & text)",
title = paste("Email sent by", input$status_choice_tab2, ", subject and text analysis"),
y = "Number of emails",
x = "Study period")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")})
output$WordcloudSendStatus_tab2 <- renderPlot({
filtered_email_send <- reactive({
email_subject_send %>%
#we focus on the worker which their status are know
filter(status_sender == input$status_choice_tab2) %>%
#compute the sum of each topics for each year studied
group_by(year_month, status_sender) %>%
mutate(
sum_subject_meeting = sum(subject_meeting),
sum_subject_business_process = sum(subject_business_process),
sum_subject_core_business = sum(subject_core_business),
sum_subject_enron_event = sum(subject_enron_event),
#for the email we use na.rm = TRUE to allow the sum to be done
sum_email_business_process = sum(email_business_process, na.rm = TRUE),
sum_email_core_business = sum(email_core_business, na.rm = TRUE),
sum_email_meeting = sum(email_meeting, na.rm = TRUE),
sum_email_enron_event = sum(email_enron_event, na.rm = TRUE)) %>% ungroup() %>%
filter((sum_subject_meeting != 0) | (sum_subject_business_process != 0) | (sum_subject_core_business != 0) | (sum_subject_enron_event != 0) | (sum_email_business_process != 0) | (sum_email_core_business != 0) | (sum_email_meeting != 0) | (sum_email_enron_event != 0)) %>%
#keep one line per year and month
distinct(status_sender, subject, reference)
})
df <- filtered_email_send()
#initiate the list for storing the count for each words in text and subject
email_words_freq <- c()
subject_freq <- c()
subject_freq <- sapply(word_list, function(i) sum(str_count(df$subject, i)))
email_words_freq <- sapply(word_list, function(j) sum(!is.na(as.list(str_locate(df$reference, j)))))
#for each status we make a total with the count from the subject and the text
total_count <- subject_freq + email_words_freq
#draw the wordcloud with the frequency of each word, only the top 10
wordcloud(word_list, total_count, min.freq = 10 ,max.words= 10,scale = c(3, 0.5) ,col=colorRampPalette(c("#cce5ff", "#3399ff", "#003366"))(length(total_count)), rot.per = 0.3)
title(main = paste0("Top 10 words in the email sent by ",input$status_choice_tab2), col.main = "black", font.main = 2)
})
output$WordcloudRecStatus_tab2 <- renderPlot({
filtered_email_rec <- reactive({
email_subject_rec %>%
#we focus on the worker which their status are know
filter(status_recipient == input$status_choice_tab2) %>%
#compute the sum of each topics for each year studied
group_by(year_month, status_recipient) %>%
mutate(
sum_subject_meeting = sum(subject_meeting),
sum_subject_business_process = sum(subject_business_process),
sum_subject_core_business = sum(subject_core_business),
sum_subject_enron_event = sum(subject_enron_event),
#for the email we use na.rm = TRUE to allow the sum to be done
sum_email_business_process = sum(email_business_process, na.rm = TRUE),
sum_email_core_business = sum(email_core_business, na.rm = TRUE),
sum_email_meeting = sum(email_meeting, na.rm = TRUE),
sum_email_enron_event = sum(email_enron_event, na.rm = TRUE)) %>% ungroup() %>%
filter((sum_subject_meeting != 0) | (sum_subject_business_process != 0) | (sum_subject_core_business != 0) | (sum_subject_enron_event != 0) | (sum_email_business_process != 0) | (sum_email_core_business != 0) | (sum_email_meeting != 0) | (sum_email_enron_event != 0)) %>%
#keep one line per year and month
distinct(status_recipient, subject, reference)
})
df <- filtered_email_rec()
#initiate the list for storing the count for each words in text and subject
email_words_freq <- c()
subject_freq <- c()
subject_freq <- sapply(word_list, function(i) sum(str_count(df$subject, i)))
email_words_freq <- sapply(word_list, function(j) sum(!is.na(as.list(str_locate(df$reference, j)))))
#for each status we make a total with the count from the subject and the text
total_count <- subject_freq + email_words_freq
#draw the wordcloud with the frequency of each word, only the top 10
#par(bg = "black")
wordcloud(word_list, total_count, min.freq = 10 ,max.words= 10,scale = c(3, 0.5),col=colorRampPalette(c("#cce5ff", "#3399ff", "#003366"))(length(total_count)), rot.per = 0.3)
title(main = paste0("Top 10 words in the email received by ",input$status_choice_tab2), col.main = "black", font.main = 2)
})
output$SubjectEmailRecStatus_tab2 <- renderPlot({
status_email_subject_rec %>%
filter(
year_month >= input$date_range_status[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_status[2], #for year_month is smaller than the min date in the range
#for selecting the status
status_recipient == input$status_choice_tab2,
#for selecting the topics
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_status])
)%>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
labs(color = "Email topics (subject & text)",
title = paste("Email received by", input$status_choice_tab2, ", subject and text analysis"),
y = "Number of emails")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
})
#the plot for the most active employee in the company, tab active
output$Top10Send <- renderPlot({
#bar chart
ggplot(p_sender, aes(reorder(sender, perc, sum), perc, fill = sender)) +
geom_bar(stat="identity") +
coord_flip() +
#graph title and label
geom_text(aes(label = labels), vjust = 0.5, size = 4) + #display the percentage for each category at the end of the corresponding bar
scale_y_continuous(labels = scales::percent_format())+
labs(title = "Top 10 Enron's employee email sender")+
xlab("Employee's email address")+
ylab("Email sent per sender (%)") +
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "none",
plot.margin = margin(10, 10, 10, 20))
})
output$Top10Rec <- renderPlot({
ggplot(p_rec, aes(reorder(recipient, perc, sum), perc, fill = recipient)) +
geom_bar(stat="identity") +
coord_flip() +
#graph title and label
geom_text(aes(label = labels), vjust = 0.5, size = 4) + #display the percentage for each category at the end of the corresponding bar
scale_y_continuous(labels = scales::percent_format())+
labs(title = "Top 10 Enron's employee email receiver",
subtitle = "Only principal receiver")+
xlab("Employee's email address")+
ylab("Email received per recipient (%)") +
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "none",
plot.margin = margin(10, 10, 10, 20))
})
output$JeffStatusSendViz <- renderPlot({
Jeff_status_send_f <- reactive({
jeff_stat_send <- df_message_status %>% filter(sender == "jeff.dasovich@enron.com") %>%
#we count the number of different email subject sent per day
group_by(date, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
statuts_stat_send <- df_message_status %>% filter(status_sender == "Employee") %>%
#we count the number of different email subject sent per day by each sender of status employee
group_by(date, sender, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Employee status") %>% transform(source = as.factor(source))
Jeff_status_send <- bind_rows(jeff_stat_send, statuts_stat_send)
})
ggplot(Jeff_status_send_f(), aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
#display the comparative statistic on the violin plot
stat_compare_means(method = "t.test", label.y = 380)+
labs(title = "Comparison of the email sent between
Jeff Dasovitch and the Enron's Employee",
x = "Source",
y = "Number of emails") +
#to better see the violin plot we break the y axis
coord_cartesian(ylim=c(0, 400))+
#set up the color for each resources
scale_fill_manual(values = c(
"Jeff Dasovich" = "tomato2",
"Employee status" = "yellowgreen"))+
#withdraw the legend form the plot
theme(legend.position = "none")
})
output$JeffWorkerSendViz <- renderPlot({
Jeff_worker_send_f <- reactive({
jeff_stat_send <- df_message_status %>% filter(sender == "jeff.dasovich@enron.com") %>%
#we count the number of different email subject send per day
group_by(date, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
sender_stat <- df_message_status %>%
#we count the number of different email subject send per day by each sender
group_by(date, sender, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "All sender") %>% select(-sender) %>% transform(source = as.factor(source))
Jeff_worker_send <- bind_rows(jeff_stat_send, sender_stat)
})
ggplot(Jeff_worker_send_f(), aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
stat_compare_means(method = "t.test", label.y = 280)+
coord_cartesian(ylim = c(0, 300))+
labs(title = "Comparison of the email sent between
Jeff Dasovitch and all sender",
x = "Source",
y = "Number of emails") +
scale_fill_manual(#set up the color for each resources
values = c(
"Jeff Dasovich" = "tomato2",
"All sender" = "cyan"))+
theme(legend.position = "none")
})
output$JeffSendStat <- renderTable({
Jeff_stat_send_f <- reactive({
jeff_stat_send <- df_message_status %>% filter(sender == "jeff.dasovich@enron.com") %>%
#we count the number of different email subject send per day
group_by(date, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
sender_stat <- df_message_status %>%
#we count the number of different email subject send per day by each sender
group_by(date, sender, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "All sender") %>% select(-sender) %>% transform(source = as.factor(source))
statuts_stat_send <- df_message_status %>% filter(status_sender == "Employee") %>%
#we count the number of different email subject send per day by each sender of status employee
group_by(date, sender, subject) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Employee status") %>% transform(source = as.factor(source))
Jeff_status_send <- bind_rows(jeff_stat_send, statuts_stat_send)
Jeff_worker_send <- bind_rows(jeff_stat_send, sender_stat)
Jeff_stat_send <- bind_rows(jeff_stat_send, sender_stat, statuts_stat_send)
})
Jeff_stat_send_f() %>% group_by(source)%>%
summarise(
mean = mean(email_count),
sd = sd(email_count),
min = min(email_count),
Q1 = quantile(email_count, 0.25),
Q3 = quantile(email_count, 0.75),
max = max(email_count))
})
output$JeffRecViz <- renderPlot({
Jeff_status_rec_f <- reactive({
#statistics on the jeff dasovich email receive per day
jeff_stat_rec <- df_message_status %>% filter(recipient == "jeff.dasovich@enron.com") %>%
group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
#statistics on the email send per day by the enron's worker who have an employee statuts
statuts_stat_rec <- df_message_status %>% filter(status_recipient == "Employee") %>% group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Employee status") %>% transform(source = as.factor(source))
Jeff_status_rec <- bind_rows(jeff_stat_rec, statuts_stat_rec)
})
ggplot(Jeff_status_rec_f(), aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
#compared statisticaly the 2 group to see if the difference is significant or not
stat_compare_means(method = "t.test", label.y = 1700)+
labs(title = "Comparison of the email received between
Jeff Dasovitch and the Enron's Employee",
x = "Source",
y = "Number of emails") +
theme(legend.position = "none")+
scale_fill_manual(#set up the color for each resources
values = c(
"Jeff Dasovich" = "tomato2",
"Employee status" = "yellowgreen"
))
})
output$JeffWorkerRecViz <- renderPlot({
Jeff_worker_rec_f <- reactive({
#statistics on the jeff dasovich email receive per day
jeff_stat_rec <- df_message_status %>% filter(recipient == "jeff.dasovich@enron.com") %>%
group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
#statistics on the email send per day by all the recipient
recipient_stat <- df_message_status %>% group_by(date, recipient) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "All recipient") %>% select(-recipient) %>% transform(source = as.factor(source))
Jeff_worker_rec <- bind_rows(jeff_stat_rec, recipient_stat)
})
ggplot(Jeff_worker_rec_f(), aes(as.factor(source), email_count, fill = as.factor(source))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white")+
ylim(c(-10,350))+
stat_compare_means(method = "t.test", label.y = 300)+
labs(title = "Comparison of the email received between
Jeff Dasovitch and all recipient",
x = "Source",
y = "Number of emails") +
theme(legend.position = "none")+
scale_fill_manual(#set up the color for each resources
values = c(
"Jeff Dasovich" = "tomato2",
"All recipient" = "cyan"
))
})
output$JeffRecStat <- renderTable({
Jeff_rec_stat_f <- reactive({
#statistics on the jeff dasovich email receive per day
jeff_stat_rec <- df_message_status %>% filter(recipient == "jeff.dasovich@enron.com") %>%
group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Jeff Dasovich") %>% transform(source = as.factor(source))
#statistics on the email send per day by all the recipient
recipient_stat <- df_message_status %>% group_by(date, recipient) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "All recipient") %>% select(-recipient) %>% transform(source = as.factor(source))
#statistics on the email send per day by the enron's worker who have an employee statuts
statuts_stat_rec <- df_message_status %>% filter(status_recipient == "Employee") %>% group_by(date) %>%
summarise(email_count = n(), .groups = "drop") %>%
mutate(source = "Employee status") %>% transform(source = as.factor(source))
Jeff_status_rec <- bind_rows(jeff_stat_rec, statuts_stat_rec)
Jeff_worker_rec <- bind_rows(jeff_stat_rec, recipient_stat)
Jeff_rec_stat <- bind_rows(jeff_stat_rec, recipient_stat, statuts_stat_rec)
})
Jeff_rec_stat_f() %>% group_by(source) %>%
summarise(
mean = mean(email_count),
median = median(email_count),
sd = sd(email_count),
min = min(email_count),
Q1 = quantile(email_count, 0.25),
Q3 = quantile(email_count, 0.75),
max = max(email_count)
)
})
#analyze the content and subject of email for specific enron worker
output$EnronWorkerSend_tab1 <- renderPlot({
person_of_interest_send %>% filter(email_label_sender == input$worker_choice_tab1) %>%
group_by(year,month) %>%
count() %>% ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = input$worker_choice_tab1,
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
})
output$EnronWorkerRec_tab1 <- renderPlot({
person_of_interest_reciveid %>% filter(email_label_recipient == input$worker_choice_tab1)%>%
group_by(year,month) %>%
count() %>% ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = input$worker_choice_tab1,
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
})
output$EnronWorkerSubjectSend_tab1 <- renderPlot({
person_of_interest_send_subject %>% filter(
year_month >= input$date_range_actor[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_actor[2], #for year_month is smaller than the min date in the range
email_label_sender == input$worker_choice_tab1,
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_actor]) #for selecting the topics
) %>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
labs(color = "Email topics (subject & text)",
title = input$worker_choice_tab1,
y = "Number of emails per topic",
x = "Study period")+
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
})
output$EnronWorkerSubjectRec_tab1 <- renderPlot({
person_of_interest_reciveid_subject %>% filter(
year_month >= input$date_range_actor[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_actor[2], #for year_month is smaller than the min date in the range
email_label_recipient == input$worker_choice_tab1,
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_actor]) #for selecting the topics
)%>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
labs(color = "Email topics (subject & text)",
title = input$worker_choice_tab1,
y = "Number of emails per topic",
x = "Study period")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
})
output$EnronWorkerSend_tab2 <- renderPlot({
person_of_interest_send %>% filter(email_label_sender == input$worker_choice_tab2) %>%
group_by(year,month) %>%
count() %>% ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = input$worker_choice_tab2,
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
})
output$EnronWorkerRec_tab2 <- renderPlot({
person_of_interest_reciveid %>% filter(email_label_recipient == input$worker_choice_tab2)%>%
group_by(year,month) %>%
count() %>% ggplot(aes(month, n, fill = month))+
geom_bar(stat = "identity") +
facet_grid(~year)+
labs(title = input$worker_choice_tab2,
y = "Number of emails")+
scale_fill_manual(
values = month_color,
labels = month_label)+
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank())
})
output$EnronWorkerSubjectSend_tab2 <- renderPlot({
person_of_interest_send_subject %>% filter(
year_month >= input$date_range_actor[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_actor[2], #for year_month is smaller than the min date in the range
email_label_sender == input$worker_choice_tab2,
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_actor]) #for selecting the topics
) %>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
labs(color = "Email topics (subject & text)",
title = input$worker_choice_tab2,
y = "Number of emails per topic",
x = "Study period")+
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
})
output$EnronWorkerSubjectRec_tab2 <- renderPlot({
person_of_interest_reciveid_subject %>% filter(
year_month >= input$date_range_actor[1], #for year_month is greater than the min date in the range
year_month <= input$date_range_actor[2], #for year_month is smaller than the min date in the range
email_label_recipient == input$worker_choice_tab2,
topic_email %in% names(topic_label[topic_label %in% input$subject_choice_actor]) #for selecting the topics
)%>%
ggplot(aes(year_month,value, color = topic_email))+
geom_line(size = 1) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")+
labs(color = "Email topics (subject & text)",
title = input$worker_choice_tab2,
y = "Number of emails per topic",
x = "Study period")+
scale_color_manual(values = topic_colors,
labels = topic_label)+
theme(legend.text.position = "bottom")
})
}
### the App
shinyApp(ui, server)
shinyApp(ui, server)
gc()
