# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000$IDsource <- match(test_2000$status_sender, nodes_test$name)-1
test_2000$IDtarget <- match(test_2000$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p
test_2000 <- as.data.frame(test %>% filter(year == 2000) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(status_sender, status_recipient)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test <- data.frame(
name=c(as.character(test_2000$status_sender),
as.character(test_2000$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000$IDsource <- match(test_2000$status_sender, nodes_test$name)-1
test_2000$IDtarget <- match(test_2000$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p
test_2001 <- as.data.frame(test %>% filter(year == 2001) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(status_sender, status_recipient)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test_01 <- data.frame(
name=c(as.character(test_2001$status_sender),
as.character(test_2001$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2001$IDsource <- match(test_2001$status_sender, nodes_test_01$name)-1
test_2001$IDtarget <- match(test_2001$status_recipient, nodes_test_01$name)-1
# Make the Network
p01 <- sankeyNetwork(Links = test_2001, Nodes = nodes_test_01,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p01
test_2001 <- as.data.frame(test %>% filter(year == 2001) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(sum)
)
View(test_2001)
test_hand <- data.frame(
source=c("CEO","CEO", "CEO", "CEO", "CEO", "CEO", "CEO"),
target=c("VP","Trader", "President", "Managing director", "Manager", "Employee", "Director"),
value=c(7,6, 5, 4, 3, 2, 1)
)
test_hand <- data.frame(
source=c("CEO","CEO", "CEO", "CEO", "CEO", "CEO", "CEO"),
target=c("VP","Trader", "President", "Managing director", "Manager", "Employee", "Director"),
value=c(7,6, 5, 4, 3, 2, 1)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(test_hand$source),
as.character(test_hand$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_hand$IDsource <- match(test_hand$source, nodes$name)-1
test_hand$IDtarget <- match(test_hand$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_hand, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
test_2000_rank <- test_2000 %>%
group_by(status_sender)%>%
mutate(
rank = rank(sum, ties.method = "first")
)
View(test_2000_rank)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test <- data.frame(
name=c(as.character(test_2000_rank$status_sender),
as.character(test_2000_rank$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000_rank$IDsource <- match(test_2000_rank$status_sender, nodes_test$name)-1
test_2000_rank$IDtarget <- match(test_2000_rank$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000_rank, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p
test_2000_rank <- as.data.frame(test_2000 %>%
group_by(status_sender)%>%
mutate(
rank = rank(sum, ties.method = "first")
))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test <- data.frame(
name=c(as.character(test_2000_rank$status_sender),
as.character(test_2000_rank$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000_rank$IDsource <- match(test_2000_rank$status_sender, nodes_test$name)-1
test_2000_rank$IDtarget <- match(test_2000_rank$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000_rank, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p
test_2000_rank <- as.data.frame(test_2000 %>%
group_by(status_sender)%>%
mutate(
rank = rank(sum, ties.method = "first")
))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test <- data.frame(
name=c(as.character(test_2000_rank$status_sender),
as.character(test_2000_rank$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000_rank$IDsource <- match(test_2000_rank$status_sender, nodes_test$name)-1
test_2000_rank$IDtarget <- match(test_2000_rank$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000_rank, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p
test_2000_rank <- as.data.frame(test_2000 %>%
group_by(status_sender)%>%
mutate(
rank = rank(sum, ties.method = "first")
))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test <- data.frame(
name=c(as.character(test_2000_rank$status_sender),
as.character(test_2000_rank$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000_rank$IDsource <- match(test_2000_rank$status_sender, nodes_test$name)-1
test_2000_rank$IDtarget <- match(test_2000_rank$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000_rank, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "sum", NodeID = "name",
sinksRight=FALSE)
p
test_2000_rank <- as.data.frame(test_2000 %>%
group_by(status_sender)%>%
mutate(
rank = rank(sum, ties.method = "first")
))
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes_test <- data.frame(
name=c(as.character(test_2000_rank$status_sender),
as.character(test_2000_rank$status_recipient)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
test_2000_rank$IDsource <- match(test_2000_rank$status_sender, nodes_test$name)-1
test_2000_rank$IDtarget <- match(test_2000_rank$status_recipient, nodes_test$name)-1
# Make the Network
p <- sankeyNetwork(Links = test_2000_rank, Nodes = nodes_test,
Source = "IDsource", Target = "IDtarget",
Value = "rank", NodeID = "name",
sinksRight=FALSE)
p
adjacencyData <-with(test_2000_rank, table(status_sender, status_recipient))
install.packages("circlize")
library(circlize)
chordDiagram(adjacencyData, transparency = 0.5)
adjacencyData <-with(test_2000, table(status_sender, status_recipient))
chordDiagram(adjacencyData, transparency = 0.5)
diag_2000<-chordDiagram(adjacencyData, transparency = 0.5)
adjacencyData_01 <-with(test_2001, table(status_sender, status_recipient))
diag_2001<-chordDiagram(adjacencyData_01, transparency = 0.5)
diag_2000<-chordDiagram(adjacencyData, transparency = 0.5)
test_2002 <- as.data.frame(test %>% filter(year == 2002) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(sum)
)
test_1991 <- as.data.frame(test %>% filter(year == 1991) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(sum)
)
adjacencyData_02 <-with(test_2002, table(status_sender, status_recipient))
diag_2002<-chordDiagram(adjacencyData_02, transparency = 0.5)
test_1999 <- as.data.frame(test %>% filter(year == 1999) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(sum)
)
adjacencyData_99 <-with(test_1999, table(status_sender, status_recipient))
diag_1999<-chordDiagram(adjacencyData_99, transparency = 0.5)
diag_2002
diag_2002<-chordDiagram(adjacencyData_02, transparency = 0.5)
?chordDiagram
install.packages("chorddiag")
devtools::install_github("mattflor/chorddiag")
colors()
status_color <- c(
"Employee" = "pink",
"Director" = "yellowgreen",
"CEO" = "orange",
"Vice President" = "tomato4",
"Trader" = "springgreen3",
"President" = "snow4",
"Managing Director" = "violetred4",
"Manager" = "skyblue3",
"In House Lawyer" = "purple4"
)
diag_2000<-chordDiagram(adjacencyData, transparency = 0.5, grid.col = status_color)
diag_2001<-chordDiagram(adjacencyData_01, transparency = 0.5, grid.col = status_color)
diag_2002<- chordDiagram(adjacencyData_02, transparency = 0.5, grid.col = status_color)
diag_1999<-chordDiagram(adjacencyData_99, transparency = 0.5, grid.col = status_color)
#plot for each year follow the exchange between group
per_year <- df_message_status %>% select(date, status_sender, status_recipient) %>%
filter(!is.na(status_sender) & !is.na(status_recipient)) %>%
mutate(year = format(date,"%Y")) %>%
group_by(date,status_sender, status_recipient) %>%
mutate(number_exchange = n()) %>% ungroup() %>%
distinct(date, status_sender, status_recipient, number_exchange, year)
year_1999 <- as.data.frame(per_year %>% filter(year == 1999) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(status_sender, status_recipient)
)
year_2000 <- as.data.frame(per_year %>% filter(year == 2000) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(status_sender, status_recipient)
)
year_2001 <- as.data.frame(per_year %>% filter(year == 2001) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(status_sender, status_recipient)
)
year_2002 <- as.data.frame(per_year %>% filter(year == 2002) %>%
group_by(status_sender, status_recipient) %>%
mutate(sum = sum(number_exchange)) %>% ungroup() %>%
distinct(status_sender, status_recipient, sum) %>%
filter(status_sender != status_recipient) %>%
arrange(status_sender, status_recipient)
)
#arrange the plot
ggarrange(
diag_1999, diag_2000, diag_2001, diag_2002,
nrow = 2
)
chord_layout <- function(mat, row, col, title="", color_list){
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
circos.clear()
circos.par(start.degree = 90, gap.degree = 8)
chordDiagram(mat, grid.col = color_list)
grid.text(title, x=0.5, y=1.05, gp=gpar(fontsize=12))
popViewport()
}
grid.newpage()
pushViewport(viewport(layout = grid.layout(2,2)))
chord_layout(adjacencyData_99, 1, 1, "Year 1999")
chord_layout(adjacencyData_99, 1, 1, "Year 1999", status_color)
chord_layout(adjacencyData_99, 1, 1, "Year 1999", status_color)
chord_layout(adjacencyData_00, 1, 1, "Year 2000", status_color)
adjacencyData_00 <-with(year_2000, table(status_sender, status_recipient))
adjacencyData_01 <-with(year_2001, table(status_sender, status_recipient))
adjacencyData_02 <-with(year_2002, table(status_sender, status_recipient))
chord_layout(adjacencyData_99, 1, 1, "Year 1999", status_color)
chord_layout(adjacencyData_00, 1, 1, "Year 2000", status_color)
chord_layout(adjacencyData_01, 1, 1, "Year 2001", status_color)
chord_layout(adjacencyData_02, 1, 1, "Year 2002", status_color)
chord_layout(adjacencyData_99, 1, 1, "Year 1999", status_color)
chord_layout(adjacencyData_00, 1, 2, "Year 2000", status_color)
chord_layout(adjacencyData_01, 2, 1, "Year 2001", status_color)
chord_layout(adjacencyData_02, 2, 2, "Year 2002", status_color)
#arrange the plot
grid.newpage()
pushViewport(viewport(layout = grid.layout(2,2)))
chord_layout <- function(mat, row, col, title="", color_list){
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
circos.clear()
circos.par(start.degree = 90, gap.degree = 8)
chordDiagram(mat, grid.col = color_list)
grid.text(title, x=0.5, y=1.05, gp=gpar(fontsize=12))
popViewport()
}
chord_layout(adjacencyData_99, 1, 1, "Year 1999", status_color)
chord_layout(adjacencyData_00, 1, 2, "Year 2000", status_color)
chord_layout(adjacencyData_01, 2, 1, "Year 2001", status_color)
chord_layout(adjacencyData_02, 2, 2, "Year 2002", status_color)
diag_list <- list(adjacencyData_99,adjacencyData_00, adjacencyData_01, adjacencyData_02 )
#function to save each chord diagram in a plot
create_chord <- function(adjacency, color_list){
circos.clear()
circos.par(start.degree=90, gap.degree = 10, track.marging = c(0.01, 0.01))
chordDiagram(mat, grid.col = color_list)
p <- recordPlot()
circos.clear()
return(p)
}
#create the plot in diag_list
diag_plot <- lapply(diag_list, create_chord)
#function to save each chord diagram in a plot
create_chord <- function(adjacency, color_list){
circos.clear()
circos.par(start.degree=90, gap.degree = 10)
chordDiagram(mat, grid.col = color_list)
p <- recordPlot()
circos.clear()
return(p)
}
#create the plot in diag_list
diag_plot <- lapply(diag_list, create_chord)
#create the plot in diag_list
diag_plot <- lapply(diag_list, status_color, create_chord)
#create the plot in diag_list
diag_99 <- create_chord(adjacencyData_00, status_color)
#function to save each chord diagram in a plot
create_chord <- function(adjacency, color_list){
circos.clear()
circos.par(start.degree=90, gap.degree = 10)
chordDiagram(adjacency, grid.col = color_list)
p <- recordPlot()
circos.clear()
return(p)
}
#create the plot in diag_list
diag_99 <- create_chord(adjacencyData_00, status_color)
#create the plot in diag_list
diag_plots <- lapply(diag_list, status_color)
#create the plot in diag_list
diag_plots <- lapply(diag_list, status_color, create_chord)
#create the plot in diag_list
plots_diag <- list()
for (i in seq(diag_list)){
plot <- diag_list[i]
p <- create_chord(plot,status_color)
plots_diag[[i]] <- p
}
View(plots_diag)
plots_diag
p1 <- create_chord(adjacencyData_99, status_color)
p2 <- create_chord(adjacencyData_00, status_color)
p1+p2
p1 + p2
create_chord(adjacencyData_99, status_color) + create_chord(adjacencyData_00, status_color)
#the color for each status
status_color <- c(
"Employee" = "pink",
"Director" = "yellowgreen",
"CEO" = "orange",
"Vice President" = "tomato4",
"Trader" = "springgreen3",
"President" = "snow4",
"Managing Director" = "violetred4",
"Manager" = "skyblue3",
"In House Lawyer" = "purple4")
#data for diagram
adjacencyData_99 <-with(year_1999, table(status_sender, status_recipient))
adjacencyData_00 <-with(year_2000, table(status_sender, status_recipient))
adjacencyData_01 <-with(year_2001, table(status_sender, status_recipient))
adjacencyData_02 <-with(year_2002, table(status_sender, status_recipient))
chordDiagram(adjacencyData_99, transparency = 0.5, grid.col = status_color)
chordDiagram(adjacencyData_00, transparency = 0.5, grid.col = status_color)
chordDiagram(adjacencyData_01, transparency = 0.5, grid.col = status_color)
chordDiagram(adjacencyData_02, transparency = 0.5, grid.col = status_color)
#the color for each status
status_color <- c(
"Employee" = "pink",
"Director" = "yellowgreen",
"CEO" = "orange",
"Vice President" = "tomato4",
"Trader" = "springgreen3",
"President" = "snow4",
"Managing Director" = "violetred4",
"Manager" = "skyblue3",
"In House Lawyer" = "purple4")
#data for diagram
adjacencyData_99 <-with(year_1999, table(status_sender, status_recipient))
adjacencyData_00 <-with(year_2000, table(status_sender, status_recipient))
adjacencyData_01 <-with(year_2001, table(status_sender, status_recipient))
adjacencyData_02 <-with(year_2002, table(status_sender, status_recipient))
chordDiagram(adjacencyData_99, transparency = 0.5, grid.col = status_color)
chordDiagram(adjacencyData_00, transparency = 0.5, grid.col = status_color)
chordDiagram(adjacencyData_01, transparency = 0.5, grid.col = status_color)
chordDiagram(adjacencyData_02, transparency = 0.5, grid.col = status_color)
#the color for each status
status_color <- c(
"Employee" = "pink",
"Director" = "yellowgreen",
"CEO" = "orange",
"Vice President" = "tomato4",
"Trader" = "springgreen3",
"President" = "snow4",
"Managing Director" = "violetred4",
"Manager" = "skyblue3",
"In House Lawyer" = "purple4")
#data for diagram
adjacencyData_99 <-with(year_1999, table(status_sender, status_recipient))
adjacencyData_00 <-with(year_2000, table(status_sender, status_recipient))
adjacencyData_01 <-with(year_2001, table(status_sender, status_recipient))
adjacencyData_02 <-with(year_2002, table(status_sender, status_recipient))
chordDiagram(adjacencyData_99, transparency = 0.5, grid.col = status_color, grid.text("year 1999"))
chordDiagram(adjacencyData_00, transparency = 0.5, grid.col = status_color, grid.text("year 2000"))
chordDiagram(adjacencyData_01, transparency = 0.5, grid.col = status_color, grid.text("year 2001"))
chordDiagram(adjacencyData_02, transparency = 0.5, grid.col = status_color, grid.text("year 2002"))
chordDiagram(adjacencyData_99, transparency = 0.5, grid.col = status_color, grid.text("year 1999", x=0.5, y=1.05, gp = gpar(fontsize=12)))
chordDiagram(adjacencyData_00, transparency = 0.5, grid.col = status_color, grid.text("year 2000", x=0.5, y=1.05, gp = gpar(fontsize=12)))
chordDiagram(adjacencyData_01, transparency = 0.5, grid.col = status_color, grid.text("year 2001", x=0.5, y=1.05, gp = gpar(fontsize=12)))
chordDiagram(adjacencyData_02, transparency = 0.5, grid.col = status_color, grid.text("year 2002", x=0.5, y=1.05, gp = gpar(fontsize=12)))
grid.newpage()
grid.text("Year 1999", y = unit(1, "npc") - unit(1, "lines"), gp = gpar(fontsize = 16, fontface = "bold"))
chordDiagram(adjacencyData_99, transparency = 0.5, grid.col = status_color)
# Example matrix
mat <- matrix(c(0, 2, 3,
2, 0, 1,
3, 1, 0),
nrow = 3,
dimnames = list(c("A", "B", "C"), c("A", "B", "C")))
# Clear before starting
circos.clear()
# Create the layout: 2 rows (title + diagram)
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow = 2, ncol = 1,
heights = unit(c(1, 9), "null"))))  # 1 part title, 9 parts plot
# Title at the top
pushViewport(viewport(layout.pos.row = 1))
grid.text("My Awesome Chord Diagram", gp = gpar(fontsize = 16, fontface = "bold"))
popViewport()
# Chord diagram in the second row
pushViewport(viewport(layout.pos.row = 2))
circos.par(start.degree = 90, gap.degree = 10)
chordDiagram(mat, grid.col = c("A" = "red", "B" = "blue", "C" = "green"))
popViewport()
library(shinydashboard)
library(shiny)
#dashboard of the Enron email analysis
ui <- dashboardPage(
dashboardHeader(
title = "Enron Company"
),
#the different page in the dashboard
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Email flux", tabName = "flux", icon = icon("circle-nodes")),
menuItem("The most active Enron worker", tabName = "active", icon = icon("sun")),
menuItem("Email exchange analysis", tabName = "email", icon = icon("envelope")),
menuItem("Potential fraud actor", tabName = "actor", icon = icon("circle-exclamation"))
)
),
#the body of the dashboard
dashboardBody(
tabItems(
# First tab content
tabItem(
#name of the tab
tabName = "dashboard",
#the title for it
h4("General information about the company"),
#1st row with a table box
fluidRow(
tabBox(
title = "The company",
id = "tabset1", height = "250px",
tabPanel("Worker per status"),
tabPanel("Email send")
)
)
),
# Second tab content
tabItem(tabName = "flux",
h4("Email flux between Enron worker status")
),
# 3rd tab content
tabItem(tabName = "actor",
h4("Email send/received by Enron worker knows for being involved in the fiscal fraud and/or the bankruptcy")
),
#4th tab content
tabItem(tabName = "active",
h4("The most active email sender of the Enron company, Jeff Dasovich")),
#5th tab content
tabItem(tabName = "email",
h4 ("Analyse of the email subject and content to count how many are related to the Enron event and the core business"))
)))
server <- function(input, output){ }
shinyApp(ui, server)
