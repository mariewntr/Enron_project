scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = -0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format(), limits=c(0,max(employeelist_2$perc)+0.01))+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_minimal()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = -0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format(), limits=c(0,max(employeelist_2$perc)+0.01))+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
#geom_text(aes(label = labels), vjust = -0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format(), limits=c(0,max(employeelist_2$perc)+0.01))+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
#geom_text(aes(label = labels), vjust = -0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = -0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = -0.7, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = -0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), hjust=0.5, vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set4", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set3", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
theme(#plot.title = element_text(hjust = 0.5, size = 18),
legend.position = "none")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set3", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set3", na.value = "grey50")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
coord_flip()+
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
ggtitle("Number of employee per status in Enron company")+
scale_fill_brewer(palette = "Set3", na.value = "grey50")+
theme(legend.position = "none")
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
#calculate the percentage for each status
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
#to invert the axis's position
coord_flip()+
#customize the theme, title and axis labels
geom_text(aes(label = labels), vjust = 0.5, size = 4) +
scale_y_continuous(labels = scales::percent_format())+
ggtitle("Number of employee per status in Enron company")+
labs(y = "Percentage (%)",x = "Employee status") +
theme_light()+
scale_fill_brewer(palette = "Set3", na.value = "grey50")+
theme(legend.position = "none")
View(employeelist_2)
View(df_message)
#definition of the set up for all the figure create in the Rmarkdown
knitr::opts_chunk$set(echo = TRUE,
fig.width=10,
fig.asp=0.8,
out.width="80%")
#library
library(tidyverse)
library(ggpubr)
library(knitr)
library(shiny)
#dataset
load(file = "C:/Users/marie/Documents/DSTI_Cours/R_big_Data/Exam/Enron_project/Enron.Rdata")
kable(employeelist %>% transform(
Email2 = as.factor(Email2),
Email3 = as.factor(Email3),
EMail4 = as.factor(EMail4)
) %>% summary())
dim_message <- dim(message)
kable(summary(message))
#prepared table to only check which email address in the Email_ID are also in the sender
employee_merge1 <- employeelist %>% mutate(sender = Email_id) %>% select(sender)
employee_merge2 <- employeelist %>% mutate(sender = Email2) %>% select(sender)
employee_merge3 <- employeelist %>% mutate(sender = Email3) %>% select(sender)
employee_merge4 <- employeelist %>% mutate(sender = EMail4) %>% select(sender)
#to do the join only with the sender variable
message_merge <- message %>% select(sender)
#first between the sender in the message table and the Email_id in the employeelist
EmailID_sender1 <- inner_join(message_merge, employee_merge1, by = "sender")
EmailID_sender1 %>% count()
#between the sender in the message table and the Email2 in the employeelist
EmailID_sender2 <- inner_join(message_merge, employee_merge2, by = "sender")
EmailID_sender2 %>% count()
#between the sender in the message table and the Email2 in the employeelist
EmailID_sender2 <- inner_join(message_merge, employee_merge2, by = "sender")
EmailID_sender2 %>% count()
#between the sender in the message table and the Email3 in the employeelist
EmailID_sender3 <- inner_join(message_merge, employee_merge3, by = "sender")
EmailID_sender3 %>% count()
#between the sender in the message table and the EMail4 in the employeelist
EmailID_sender4 <- inner_join(message_merge, employee_merge4, by = "sender")
EmailID_sender4 %>% count()
#prepared table to only check which email address in the Email_ID are also in the sender
employee_merge1 <- employeelist %>% mutate(rvalue = Email_id) %>% select(rvalue)
employee_merge2 <- employeelist %>% mutate(rvalue = Email2) %>% select(rvalue)
employee_merge3 <- employeelist %>% mutate(rvalue = Email3) %>% select(rvalue)
employee_merge4 <- employeelist %>% mutate(rvalue = EMail4) %>% select(rvalue)
#to do the join only with the sender variable
recipient_merge <- recipientinfo %>% select(rvalue)
#first between the rvalue in the recipient table and the Email_id in the employeelist
EmailID_recipient1 <- inner_join(recipient_merge, employee_merge1, by = "rvalue")
EmailID_recipient1 %>% count()
# between the rvalue in the recipient table and the Email2 in the employeelist
EmailID_recipient2 <- inner_join(recipient_merge, employee_merge2, by = "rvalue")
EmailID_recipient2 %>% count()
#between the rvalue in the recipient table and the Email3 in the employeelist
EmailID_recipient3 <- inner_join(recipient_merge, employee_merge3, by = "rvalue")
EmailID_recipient3 %>% count()
#first between the rvalue in the recipient table and the EMail4 in the employeelist
EmailID_recipient4 <- inner_join(recipient_merge, employee_merge4, by = "rvalue")
EmailID_recipient4 %>% count()
employeelist_2 <- employeelist %>%
select(-c(Email2, EMail4)) %>% #the variable we don't need in the data
transform(eid = as.factor(eid)) %>% #data type change for the variable eid to factor
mutate(status = if_else((status == "N/A"), NA, status)) #homogenized the declaration of the NA in the variable status
message_2 <- message %>%
select(-c(message_id)) %>% #withdraw the variable we don't need
transform(#change the data type for factor
mid = as.factor(mid),
sender = as.factor(sender),
subject = as.factor(subject)) %>%
#add the year variable in the table from the date
mutate(year = as.factor(format(date, "%Y"))) %>%
#filter to keep only the date from 1999 to 2002
filter(year %in% c(1999 : 2002)) %>% #drop the year variable which is no more useful in the data
select(-year)
recipientinfo_2 <- recipientinfo %>%
#change the variable data type for factor
transform(rid = as.factor(rid),
rvalue = as.factor(rvalue),
mid = as.factor(mid))
referenceinfo_2 <- referenceinfo %>%
#change the variable data type for factor
transform(rfid = as.factor(rfid),
mid = as.factor(mid))
#first between the recipientinfo_2 and message_2
df_message <- left_join(recipientinfo_2, message_2, #the table we merged
by = "mid") #the variable used for merging
#then between the new table df_message and the referenceinfo_2
df_message <- left_join(df_message, referenceinfo_2,
by = "mid")
dim(recipientinfo_2)[1] == dim(df_message)[1]
#display the datatype of each variable in each new dataframe
print("Data type and dimension of the new employeelist table")
str(employeelist_2)
print(" ")
print("Data type and dimension of the new df_message table")
str(df_message)
df_message <- df_message %>% filter( #with drawn the lines where we have a missing value for the sender, date, and subject variables.
is.na(sender) == FALSE,
is.na(subject) == FALSE,
is.na(date) == FALSE)
summary(df_message)
#prepared the employeelist table for the merge
employee_merge_final <- employeelist_2 %>%
select(Email_id, status) %>% #keep only the variables we need
mutate(status_sender = status) %>% #rename the status variable to know to who is attached the status
select(-status)
#merged with the df_message table
df_message_status <- left_join(df_message, employee_merge_final,
join_by(sender == Email_id))
#verification the merged work
df_message_status %>% filter(!is.na(status_sender)) %>% count()
#prepared the employeelist table for the merge
employee_merge_final2 <- employeelist_2 %>%
select(Email3, status) %>% #keep only the variables we need
mutate(status_sender_email3 = status) %>% #rename the status variable to know to who is attached the status
select(-status)
#merged with the df_message table
df_message_status <- left_join(df_message_status, employee_merge_final2,
join_by(sender == Email3))
#verification the merged work
df_message_status %>% filter(!is.na(status_sender_email3)) %>% count()
df_message_status <- df_message_status %>% mutate(
#replace the NA value in the variable by the value in the 2nd variable
status_sender = if_else((is.na(status_sender) == TRUE), status_sender_email3, status_sender)) %>% select(-status_sender_email3) #drop the variable
#verification the merged work
df_message_status %>% filter(!is.na(status_sender)) %>% count()
#prepared the employeelist table for the merge
employee_merge_final_recipient <- employeelist_2 %>%
select(Email_id, status) %>% #keep only the variables we need
mutate(status_recipient = status) %>% #rename the status variable to know to who is attached the status
select(-status)
#merged with the df_message table
df_message_status <- left_join(df_message_status, employee_merge_final_recipient,
join_by(rvalue == Email_id))
#verification the merged work
df_message_status %>% filter(!is.na(status_recipient)) %>% count()
#prepared the employeelist table for the merge
employee_merge_final_recipient2 <- employeelist_2 %>%
select(Email3, status) %>% #keep only the variables we need
mutate(status_recipient_email3 = status) %>% #rename the status variable to know to who is attached the status
select(-status)
#merged with the df_message table
df_message_status <- left_join(df_message_status, employee_merge_final_recipient2,
join_by(rvalue == Email3))
#verification the merged work
df_message_status %>% filter(!is.na(status_recipient_email3)) %>% count()
df_message_status <- df_message_status %>% mutate(
#replace the NA value in the variable by the value in the 2nd variable
status_recipient = if_else((is.na(status_recipient) == TRUE), status_recipient_email3, status_recipient)) %>%
select(-status_recipient_email3) #drop the variable
#verification the merged work
df_message_status %>% filter(!is.na(status_recipient)) %>% count()
start <- df_message %>% filter(!is.na(reference)) %>% select(date) %>%
arrange(date) %>% head(n=1)
end <- df_message %>% filter(!is.na(reference)) %>% select(date) %>%
arrange(desc(date)) %>% head(n=1)
length_email_content <- df_message %>% filter(!is.na(reference)) %>% count()
df_message_status <- df_message_status %>%
#withdraw the variable which are identifier
select(-c(mid, rfid, rid)) %>%
#change the name of the recipient email variable
mutate(recipient = rvalue) %>%
#order the different variable
select(date, sender, status_sender, rtype, recipient, status_recipient, subject, reference)
#cleaning of the object no more necessary in the environment
rm(employeelist, message, message_2, recipientinfo, recipientinfo_2, referenceinfo, referenceinfo_2, df_message_missing, message_merge, recipient_merge, EmailID_sender1, EmailID_sender2, EmailID_sender3, EmailID_sender4, EmailID_recipient1, EmailID_recipient2, EmailID_recipient3, EmailID_recipient4, employee_merge1, employee_merge2, employee_merge3, employee_merge4, end, start, length_email_content, employee_merge_final, employee_merge_final2, employee_merge_final_recipient, employee_merge_final_recipient2)
#in this part we will draw many plot, every will have the same theme
theme_set(theme_light())
employeelist_2 %>% select(status) %>% #select the needed variable
group_by(status) %>% count() %>% #count the number of employee per status
ungroup() %>%
#calculate the percentage for each status
mutate(perc = `n`/sum(`n`),
labels = scales::percent(perc)) %>%
#bar chart
ggplot(aes(reorder(status, perc ,sum),perc, fill = status)) +
geom_bar(stat = "identity") +
#to invert the axis's position
coord_flip()+
#customize the theme, title and axis labels
geom_text(aes(label = labels), vjust = 0.5, size = 4) + #display the percentage for each category at the end of the corresponding bar
scale_y_continuous(labels = scales::percent_format())+
ggtitle("Number of employee per status in Enron company")+
labs(y = "Percentage (%)",x = "Employee status") +
scale_fill_brewer(palette = "Set3",
#to display the NA in grey on the graph
na.value = "grey50")+
theme(legend.position = "none")
#count the number of disctint sender email address
sender_count <- df_message_status %>% select(sender) %>% #keep only the variable we need
distinct(sender) %>% #keep only once each email address
count() #count them
#count the number of disctint recipient email address
recipient_count <- df_message_status %>% select(recipient) %>% distinct(recipient) %>% count()
#Display the top 10 email address of sender
p1 <- df_message_status %>% group_by(sender)%>% count() %>% #to count the number of email send per email address
arrange(desc(n)) %>% head(10) %>% #to get only the 10 email address with the most important number of email send
#bar chart
ggplot(aes(reorder(sender, n, sum), n, fill = sender)) +
geom_bar(stat="identity") +
coord_flip() +
#graph title and label
labs(title = "Top 10 Enron's employee email sender")+
xlab("Employee's email addres")+
ylab("Number of email send") +
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "none",
plot.margin = margin(10, 10, 10, 20))
#Display the top 10 email address of recipient
p2 <- df_message_status %>% filter(rtype == "TO") %>% #select only the email of the direct concerned receiver
group_by(recipient)%>% count() %>% #to count the number of email send per email address
arrange(desc(n)) %>% head(10) %>% #to get only the 10 email address with the most important number of email send
#bar chart
ggplot(aes(reorder(recipient, n, sum), n, fill = recipient)) +
geom_bar(stat="identity") +
coord_flip() +
#graph title and label
labs(title = "Top 10 Enron's employee email receiver",
subtitle = "Only principal receiver")+
xlab("Employee's email address")+
ylab("Number of email recipient") +
scale_fill_brewer(palette = "Set3")+
theme(legend.position = "none",
plot.margin = margin(10, 10, 10, 20))
#arrange the plot on the same place
ggarrange(p1, p2,
nrow=2 )
#return only one result from that query to get the status of the most active sender/recipient
head(df_message_status[df_message_status$sender == "jeff.dasovich@enron.com", "status_sender"],
n=1)
install.packages("ggstatsplot")
library(palmerpenguins)
library(tidyverse)
#load and prepare the data
data("penguins", package = "palmerpenguins")
#drop the missing values
penguins <- drop_na(penguins)
plt <- ggbetweenstats(
penguins,
species,
bill_length_mm
)
library(ggstatsplot)
plt <- ggbetweenstats(
penguins,
species,
bill_length_mm
)
plt <- ggbetweenstats(
penguins,
species,
bill_length_mm
)
library(ggstatsplot)
